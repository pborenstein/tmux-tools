#!/bin/bash

# tmux-overview - Display comprehensive information about all tmux sessions
# Usage: tmux-overview [options]

set -euo pipefail

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[0;33m'
readonly BLUE='\033[0;34m'
readonly PURPLE='\033[0;35m'
readonly CYAN='\033[0;36m'
readonly WHITE='\033[1;37m'
readonly GRAY='\033[0;90m'
readonly NC='\033[0m' # No Color

# Default options
DETAILED=false
JSON_OUTPUT=false
SESSION_FILTER=""
SHOW_HELP=false

# Parse command line arguments
while [[ $# -gt 0 ]]; do
  case $1 in
    -d|--detailed)
      DETAILED=true
      shift
      ;;
    -j|--json)
      JSON_OUTPUT=true
      shift
      ;;
    -s|--session)
      SESSION_FILTER="$2"
      shift 2
      ;;
    -h|--help)
      SHOW_HELP=true
      shift
      ;;
    *)
      echo "Unknown option: $1"
      exit 1
      ;;
  esac
done

# Help function
show_help() {
  cat << EOF
tmux-overview - Display comprehensive information about all tmux sessions

USAGE:
    tmux-overview [OPTIONS]

OPTIONS:
    -d, --detailed          Show detailed view with all panes and commands
    -j, --json             Output in JSON format
    -s, --session NAME     Show only the specified session
    -h, --help             Show this help message

EXAMPLES:
    tmux-overview                    # Show summary of all sessions
    tmux-overview -d                 # Show detailed view with all panes
    tmux-overview -s milan           # Show only 'milan' session
    tmux-overview -j                 # Output in JSON format

EOF
}

# Check if tmux is running
check_tmux() {
  if ! command -v tmux >/dev/null 2>&1; then
    echo -e "${RED}Error: tmux is not installed${NC}" >&2
    exit 1
  fi

  if ! tmux list-sessions >/dev/null 2>&1; then
    echo -e "${YELLOW}No tmux sessions are currently running${NC}"
    exit 0
  fi
}

# Get session data
get_sessions() {
  local sessions_data
  sessions_data=$(tmux list-sessions -F "#{session_name}|#{session_created}|#{session_attached}|#{session_windows}" 2>/dev/null || true)

  if [[ -n "$SESSION_FILTER" ]]; then
    echo "$sessions_data" | grep "^$SESSION_FILTER|" || true
  else
    echo "$sessions_data"
  fi
}

# Get window data
get_windows() {
  local windows_data
  if [[ -n "$SESSION_FILTER" ]]; then
    windows_data=$(tmux list-windows -t "$SESSION_FILTER" -F "#{session_name}|#{window_index}|#{window_name}|#{window_panes}|#{window_active}" 2>/dev/null || true)
  else
    windows_data=$(tmux list-windows -a -F "#{session_name}|#{window_index}|#{window_name}|#{window_panes}|#{window_active}" 2>/dev/null || true)
  fi

  if [[ -n "$SESSION_FILTER" ]]; then
    echo "$windows_data" | grep "^$SESSION_FILTER|" || true
  else
    echo "$windows_data"
  fi
}

# Get pane data
get_panes() {
  local panes_data
  panes_data=$(tmux list-panes -a -F "#{session_name}|#{window_index}|#{pane_index}|#{pane_current_command}|#{pane_current_path}|#{pane_active}" 2>/dev/null || true)

  if [[ -n "$SESSION_FILTER" ]]; then
    echo "$panes_data" | grep "^$SESSION_FILTER|" || true
  else
    echo "$panes_data"
  fi
}

# Format timestamp
format_time() {
  local timestamp=$1
  if command -v gdate >/dev/null 2>&1; then
    gdate -d "@$timestamp" "+%Y-%m-%d %H:%M:%S"
  else
    date -r "$timestamp" "+%Y-%m-%d %H:%M:%S" 2>/dev/null || echo "Unknown"
  fi
}

# JSON output
output_json() {
  local sessions_data windows_data panes_data
  sessions_data=$(get_sessions)
  windows_data=$(get_windows)
  panes_data=$(get_panes)

  echo "{"
  echo '  "sessions": ['

  local first_session=true
  while IFS='|' read -r session_name session_created session_attached session_windows; do
    [[ -z "$session_name" ]] && continue

    if [[ "$first_session" = false ]]; then
      echo ","
    fi
    first_session=false

    echo "    {"
    echo "      \"name\": \"$session_name\","
    echo "      \"created\": \"$(format_time "$session_created")\","
    echo "      \"attached\": $session_attached,"
    echo "      \"windows\": ["

    local first_window=true
    while IFS='|' read -r win_session win_index win_name win_panes win_active; do
      [[ "$win_session" != "$session_name" ]] && continue

      if [[ "$first_window" = false ]]; then
        echo ","
      fi
      first_window=false

      echo "        {"
      echo "          \"index\": $win_index,"
      echo "          \"name\": \"$win_name\","
      echo "          \"panes\": $win_panes,"
      echo "          \"active\": $win_active,"
      echo "          \"pane_details\": ["

      local first_pane=true
      while IFS='|' read -r pane_session pane_window pane_index pane_command pane_path pane_active; do
        [[ "$pane_session" != "$session_name" ]] && continue
        [[ "$pane_window" != "$win_index" ]] && continue

        if [[ "$first_pane" = false ]]; then
          echo ","
        fi
        first_pane=false

        echo "            {"
        echo "              \"index\": $pane_index,"
        echo "              \"command\": \"$pane_command\","
        echo "              \"path\": \"$pane_path\","
        echo "              \"active\": $pane_active"
        echo -n "            }"
      done <<< "$panes_data"

      echo ""
      echo "          ]"
      echo -n "        }"
    done <<< "$windows_data"

    echo ""
    echo "      ]"
    echo -n "    }"
  done <<< "$sessions_data"

  echo ""
  echo "  ]"
  echo "}"
}

# Summary output
output_summary() {
  local sessions_data windows_data
  sessions_data=$(get_sessions)
  windows_data=$(get_windows)

  echo -e "${WHITE}Tmux Sessions Overview${NC}"
  echo -e "${GRAY}$(date)${NC}"
  echo ""

  local total_sessions=0
  local total_windows=0

  while IFS='|' read -r session_name session_created session_attached session_windows; do
    [[ -z "$session_name" ]] && continue

    ((total_sessions++))
    ((total_windows += session_windows))

    local status_color=$GREEN
    local status_text="detached"
    if [[ "$session_attached" == "1" ]]; then
      status_color=$CYAN
      status_text="attached"
    fi

    echo -e "${BLUE}●${NC} ${WHITE}$session_name${NC} ${GRAY}($(format_time "$session_created"))${NC} ${status_color}[$status_text]${NC}"

    # Show windows for this session
    while IFS='|' read -r win_session win_index win_name win_panes win_active; do
      [[ "$win_session" != "$session_name" ]] && continue

      local window_indicator="  ├─"
      local window_color=$GRAY
      if [[ "$win_active" == "1" ]]; then
        window_color=$YELLOW
        window_indicator="  ├─●"
      fi

      echo -e "$window_indicator ${window_color}$win_index:$win_name${NC} ${GRAY}($win_panes panes)${NC}"
    done <<< "$windows_data"

    echo ""
  done <<< "$sessions_data"

  echo -e "${GRAY}Total: $total_sessions sessions, $total_windows windows${NC}"
}

# Detailed output
output_detailed() {
  local sessions_data windows_data panes_data
  sessions_data=$(get_sessions)
  windows_data=$(get_windows)
  panes_data=$(get_panes)

  echo -e "${WHITE}Tmux Sessions (Detailed)${NC}"
  echo -e "${GRAY}$(date)${NC}"
  echo ""

  while IFS='|' read -r session_name session_created session_attached session_windows; do
    [[ -z "$session_name" ]] && continue

    local status_color=$GREEN
    local status_text="detached"
    if [[ "$session_attached" == "1" ]]; then
      status_color=$CYAN
      status_text="attached"
    fi

    echo -e "${BLUE}●${NC} ${WHITE}$session_name${NC} ${GRAY}($(format_time "$session_created"))${NC} ${status_color}[$status_text]${NC}"

    # Show windows for this session
    local last_window_index=""
    while IFS='|' read -r win_session win_index win_name win_panes win_active; do
      [[ "$win_session" != "$session_name" ]] && continue
      last_window_index=$win_index
    done <<< "$windows_data"

    while IFS='|' read -r win_session win_index win_name win_panes win_active; do
      [[ "$win_session" != "$session_name" ]] && continue

      local window_prefix="├─"
      if [[ "$win_index" == "$last_window_index" ]]; then
        window_prefix="└─"
      fi

      local window_color=$GRAY
      local window_indicator="$window_prefix"
      if [[ "$win_active" == "1" ]]; then
        window_color=$YELLOW
        window_indicator="${window_prefix}●"
      fi

      echo -e "  $window_indicator ${window_color}$win_index:$win_name${NC} ${GRAY}($win_panes panes)${NC}"

      # Show panes for this window
      local pane_count=0
      while IFS='|' read -r pane_session pane_window pane_index pane_command pane_path pane_active; do
        [[ "$pane_session" != "$session_name" ]] && continue
        [[ "$pane_window" != "$win_index" ]] && continue
        ((pane_count++))
      done <<< "$panes_data"

      local current_pane=0
      while IFS='|' read -r pane_session pane_window pane_index pane_command pane_path pane_active; do
        [[ "$pane_session" != "$session_name" ]] && continue
        [[ "$pane_window" != "$win_index" ]] && continue

        ((current_pane++))

        local pane_prefix="   ├─"
        if [[ "$win_index" == "$last_window_index" ]]; then
          pane_prefix="    ├─"
        fi
        if [[ "$current_pane" == "$pane_count" ]]; then
          if [[ "$win_index" == "$last_window_index" ]]; then
            pane_prefix="    └─"
          else
            pane_prefix="   └─"
          fi
        fi

        local pane_color=$GRAY
        local pane_indicator="$pane_prefix"
        if [[ "$pane_active" == "1" ]]; then
          pane_color=$GREEN
          pane_indicator="${pane_prefix}●"
        fi

        # Shorten path for display
        local short_path="$pane_path"
        if [[ ${#short_path} -gt 40 ]]; then
          short_path="...${short_path: -37}"
        fi

        echo -e "$pane_indicator ${pane_color}$pane_index${NC} ${PURPLE}$pane_command${NC} ${GRAY}$short_path${NC}"
      done <<< "$panes_data"

    done <<< "$windows_data"

    echo ""
  done <<< "$sessions_data"
}

# Main function
main() {
  if [[ "$SHOW_HELP" = true ]]; then
    show_help
    exit 0
  fi

  check_tmux

  if [[ "$JSON_OUTPUT" = true ]]; then
    output_json
  elif [[ "$DETAILED" = true ]]; then
    output_detailed
  else
    output_summary
  fi
}

main "$@"